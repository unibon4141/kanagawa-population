{"version":3,"sources":["Axis.js","Legend.js","SubAreaGraph.js","App.js","index.js"],"names":["VerricalAxis","scale","strokeColor","range","y1","y2","x1","x2","stroke","strokeWidth","transform","x","y","textAnchor","dominantBaseline","fontSize","ticks","map","i","fill","VerricalHouseAxis","HorizontalAxis","Legend","type","domain","item","r","SubAreaGraph","target","colorScale","useState","eachKanagawaData","setEachKanagawaData","margin","svgWidth","svgHeight","useEffect","a","fetch","response","json","fetchData","length","style","position","top","left","width","height","border","targetData","find","name","startI","graphData","population","filter","year","Object","keys","xScale","d3","nice","yScalePopulation","viewBox","preData","cx","cy","Main","Kanagawa","KanagawaGraph","props","mapData","setMapData","yScaleHousehold","sizeOfHousehold","id","data","setData","clickedArea","setClickedArea","mouseEnterHandle","e","currentTarget","dataset","then","topoSaitama","geoSaitama","topojson","objects","kanagawa","geoSaitamacp","JSON","parse","stringify","features","arrChanged","divideArray","properties","N03_007","tmpArray","push","aProjection","center","translate","kanagawaWidth","kanagawaHeight","geoPath","projection","pathes","N03_004","path","padding","onClick","d","App","render","document","querySelector"],"mappings":"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","file":"static/js/main.c1b55260.chunk.js","sourcesContent":["export function VerricalAxis({ scale }) {\r\n  const strokeColor = \"#888\";\r\n  const x = 0;\r\n  const [y1, y2] = scale.range();\r\n\r\n  return (\r\n    <g>\r\n      <line\r\n        x1={x}\r\n        y1={y1}\r\n        x2={x}\r\n        y2={y2 + 2}\r\n        stroke={strokeColor}\r\n        strokeWidth=\"2\"\r\n      ></line>\r\n      <g>\r\n        <g transform=\"translate(-80, 200) rotate(-90)\">\r\n          <text\r\n            x=\"0\"\r\n            y=\"0\"\r\n            textAnchor=\"end\"\r\n            dominantBaseline=\"central\"\r\n            fontSize=\"15\"\r\n          >\r\n            人口\r\n          </text>\r\n        </g>\r\n\r\n        {scale.ticks().map((y, i) => {\r\n          return (\r\n            <g key={i} transform={`translate(0, ${scale(y)})`}>\r\n              <line x1=\"0\" y1=\"0\" x2=\"5\" y2=\"0\" stroke={strokeColor}></line>\r\n              <text\r\n                x=\"-8\"\r\n                y=\"0\"\r\n                textAnchor=\"end\"\r\n                dominantBaseline=\"central\"\r\n                fill=\"black\"\r\n                fontSize=\"12\"\r\n              >\r\n                {y}\r\n              </text>\r\n            </g>\r\n          );\r\n        })}\r\n      </g>\r\n    </g>\r\n  );\r\n}\r\n\r\nexport function VerricalHouseAxis({ scale }) {\r\n  const strokeColor = \"#888\";\r\n  const x = 500;\r\n  const [y1, y2] = scale.range();\r\n\r\n  return (\r\n    <g>\r\n      <line\r\n        x1={x}\r\n        y1={y1}\r\n        x2={x}\r\n        y2={y2 + 2}\r\n        stroke={strokeColor}\r\n        strokeWidth=\"2\"\r\n      ></line>\r\n      <g>\r\n        <g transform={`translate(${x}, 200) rotate(-90)`}>\r\n          <text\r\n            x=\"30\"\r\n            y=\"60\"\r\n            textAnchor=\"end\"\r\n            dominantBaseline=\"central\"\r\n            fontSize=\"15\"\r\n          >\r\n            1世帯あたりの平均人数\r\n          </text>\r\n        </g>\r\n\r\n        {scale.ticks().map((y, i) => {\r\n          return (\r\n            <g key={i} transform={`translate(${x}, ${scale(y)})`}>\r\n              <line x1=\"0\" y1=\"0\" x2=\"-5\" y2=\"0\" stroke={strokeColor}></line>\r\n              <text\r\n                x=\"30\"\r\n                y=\"0\"\r\n                textAnchor=\"end\"\r\n                dominantBaseline=\"central\"\r\n                fill=\"black\"\r\n                fontSize=\"12\"\r\n              >\r\n                {y}\r\n              </text>\r\n            </g>\r\n          );\r\n        })}\r\n      </g>\r\n    </g>\r\n  );\r\n}\r\n\r\nexport function HorizontalAxis({ scale }) {\r\n  const strokeColor = \"#888\";\r\n  const y = 350;\r\n\r\n  const [x1, x2] = scale.range();\r\n  return (\r\n    <g>\r\n      <line x1={x1} y1={y} x2={x2 + 5} y2={y} stroke={strokeColor}></line>\r\n      <g>\r\n        <g transform=\"translate(250, 380)\">\r\n          <text\r\n            x=\"0\"\r\n            y=\"0\"\r\n            textAnchor=\"end\"\r\n            dominantBaseline=\"central\"\r\n            fontSize=\"15\"\r\n          >\r\n            年\r\n          </text>\r\n        </g>\r\n\r\n        {scale.ticks().map((x, i) => {\r\n          return (\r\n            <g key={i} transform={`translate(${scale(x)}, 0)`}>\r\n              <line x1=\"0\" y1=\"395\" x2=\"0\" y2=\"400\" stroke={strokeColor}></line>\r\n              <text\r\n                x=\"0\"\r\n                y={y + 15}\r\n                textAnchor=\"middle\"\r\n                dominantBaseline=\"central\"\r\n                fontSize=\"12\"\r\n              >\r\n                {x}\r\n              </text>\r\n            </g>\r\n          );\r\n        })}\r\n      </g>\r\n    </g>\r\n  );\r\n}\r\n","function Legend({ scale, type }) {\r\n  const dx = type === \"main\" ? 150 : 150;\r\n  return (\r\n    <g transform={`translate(${dx},0)`}>\r\n      {scale.domain().map((item, i) => {\r\n        return (\r\n          <g key={i} transform={`translate(400, ${20 + i * 15})`}>\r\n            <circle r=\"5\" fill={scale(item)} />\r\n            <text x=\"10\" fontSize=\"11\" dominantBaseline=\"central\">\r\n              {item}\r\n            </text>\r\n          </g>\r\n        );\r\n      })}\r\n    </g>\r\n  );\r\n}\r\nexport default Legend;\r\n","import { useEffect, useState } from \"react\";\r\nimport { VerricalAxis, VerricalHouseAxis, HorizontalAxis } from \"./Axis\";\r\nimport * as d3 from \"d3\";\r\nimport Legend from \"./Legend\";\r\n\r\nfunction SubAreaGraph({ target, colorScale }) {\r\n  const [eachKanagawaData, setEachKanagawaData] = useState([]);\r\n  const margin = {\r\n    top: 10,\r\n    bottom: 50,\r\n    left: 100,\r\n    right: 180,\r\n  };\r\n  const contentWidth = 500;\r\n  const contentHeight = 350;\r\n  const svgWidth = margin.right + margin.left + contentWidth;\r\n  const svgHeight = margin.top + margin.bottom + contentHeight;\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const response = await fetch(\"kanagawa3.json\");\r\n      const fetchData = await response.json();\r\n      setEachKanagawaData(fetchData);\r\n    })();\r\n  }, []);\r\n  if (eachKanagawaData.length === 0 || target === null) {\r\n    return (\r\n      <div>\r\n        <h2 style={{ position: \"absolute\", top: \"0\", left: \"850px\" }}>\r\n          市区町村別のグラフ\r\n        </h2>\r\n        <div\r\n          style={{\r\n            width: svgWidth,\r\n            height: svgHeight,\r\n            border: \"solid 2px\",\r\n            position: \"absolute\",\r\n            top: \"50px\",\r\n            left: \"800px\",\r\n          }}\r\n        ></div>\r\n      </div>\r\n    );\r\n  }\r\n  const targetData = eachKanagawaData.find((item) => item.name === target);\r\n\r\n  let startI = 1970;\r\n  const graphDataTmp = targetData.population.filter((item) => {\r\n    if (item[startI] !== null) {\r\n      startI += 5;\r\n      return true;\r\n    } else {\r\n      startI += 5;\r\n      return false;\r\n    }\r\n  });\r\n\r\n  const graphData = graphDataTmp.map((item) => {\r\n    const year = Object.keys(item)[0];\r\n    return {\r\n      year: year,\r\n      population: item[year],\r\n    };\r\n  });\r\n\r\n  const xScale = d3\r\n    .scaleLinear()\r\n    .domain(d3.extent(graphData, (item) => item.year))\r\n    .range([0, contentWidth])\r\n    .nice();\r\n  const yScalePopulation = d3\r\n    .scaleLinear()\r\n    .domain([0, d3.extent(graphData, (item) => item.population)[1]])\r\n    .range([contentHeight, 0]);\r\n  return (\r\n    <div>\r\n      <h2 style={{ position: \"absolute\", top: \"0\", left: \"850px\" }}>\r\n        市区町村別のグラフ : {target}\r\n      </h2>\r\n      <div style={{ position: \"absolute\", top: \"50px\", left: \"800px\" }}>\r\n        <svg\r\n          viewBox={`${-margin.left} ${-margin.top} ${svgWidth} ${svgHeight}`}\r\n          width={svgWidth}\r\n          height={svgHeight}\r\n          style={{ border: \"solid 2px\" }}\r\n        >\r\n          <Legend scale={colorScale} type=\"sub\" />\r\n          <VerricalAxis scale={yScalePopulation} />\r\n          <HorizontalAxis scale={xScale} />\r\n\r\n          <g>\r\n            {graphData.map((item, i) => {\r\n              const preData = i > 0 ? graphData[i - 1] : null;\r\n              if (i > 0) {\r\n                return (\r\n                  <line\r\n                    key={i}\r\n                    x1={xScale(preData[\"year\"])}\r\n                    y1={yScalePopulation(preData[\"population\"])}\r\n                    x2={xScale(item[\"year\"])}\r\n                    y2={yScalePopulation(item[\"population\"])}\r\n                    stroke=\"black\"\r\n                  ></line>\r\n                );\r\n              }\r\n            })}\r\n          </g>\r\n          <g>\r\n            {graphData.map((item, i) => {\r\n              return (\r\n                <circle\r\n                  transform={`translate(${xScale(\r\n                    item[\"year\"]\r\n                  )},${yScalePopulation(item[\"population\"])})`}\r\n                  key={i}\r\n                  cx=\"0\"\r\n                  cy=\"0\"\r\n                  r=\"5\"\r\n                  fill={colorScale(\"人口\")}\r\n                />\r\n              );\r\n            })}\r\n          </g>\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default SubAreaGraph;\r\n","import * as topojson from \"topojson\";\r\nimport * as d3 from \"d3\";\r\nimport { useEffect, useState } from \"react\";\r\nimport SubAreaGraph from \"./SubAreaGraph\";\r\nimport { VerricalAxis, VerricalHouseAxis, HorizontalAxis } from \"./Axis\";\r\nimport Legend from \"./Legend\";\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Main />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Main() {\r\n  const colorScale = d3.scaleOrdinal(d3.schemeCategory10);\r\n  return (\r\n    <div>\r\n      <Kanagawa scale={colorScale} />\r\n    </div>\r\n  );\r\n}\r\n// 神奈川の折れ線グラフを描画\r\nfunction KanagawaGraph(props) {\r\n  const colorScale = props.scale;\r\n  const [mapData, setMapData] = useState([]);\r\n  const margin = {\r\n    top: 10,\r\n    bottom: 50,\r\n    left: 100,\r\n    right: 180,\r\n  };\r\n  const contentWidth = 500;\r\n  const contentHeight = 350;\r\n  const svgWidth = margin.right + margin.left + contentWidth;\r\n  const svgHeight = margin.top + margin.bottom + contentHeight;\r\n  useEffect(() => {\r\n    (async () => {\r\n      const response = await fetch(\"kanagawa1.json\");\r\n      const fetchData = await response.json();\r\n      setMapData(fetchData);\r\n    })();\r\n  }, []);\r\n\r\n  if (mapData.length == 0) {\r\n    return <div>loading</div>;\r\n  }\r\n\r\n  // scalelinier:変数変換\r\n  const xScale = d3\r\n    .scaleLinear()\r\n    // dommain(a,b): 元の座標の最小、最大ヲ指定\r\n    // d3.extent(array):return : [array_min, array_max]\r\n    .domain(d3.extent(mapData, (item) => item[\"year\"]))\r\n    // range:出力の最大、最小値\r\n    .range([0, contentWidth])\r\n    .nice();\r\n  const yScaleHousehold = d3\r\n    .scaleLinear()\r\n    .domain([0, d3.extent(mapData, (item) => item[\"sizeOfHousehold\"])[1]])\r\n    .range([contentHeight, 0]);\r\n\r\n  const yScalePopulation = d3\r\n    .scaleLinear()\r\n    .domain([0, d3.extent(mapData, (item) => item[\"population\"])[1]])\r\n    .range([contentHeight, 0]);\r\n  return (\r\n    <div>\r\n      <h2 style={{ position: \"absolute\", top: \"0\", left: \"0\" }}>\r\n        神奈川県全体のグラフ\r\n      </h2>\r\n      <div style={{ position: \"absolute\", top: \"50px\", left: 0 }}>\r\n        <svg\r\n          viewBox={`${-margin.left} ${-margin.top} ${svgWidth} ${svgHeight}`}\r\n          width={svgWidth}\r\n          height={svgHeight}\r\n          style={{ border: \"solid 2px\" }}\r\n        >\r\n          <Legend scale={colorScale} type=\"main\" />\r\n          <VerricalAxis scale={yScalePopulation} />\r\n          <HorizontalAxis scale={xScale} />\r\n          <VerricalHouseAxis scale={yScaleHousehold} />\r\n          <g>\r\n            {mapData.map((item, i) => {\r\n              const preData = i > 0 ? mapData[i - 1] : null;\r\n              if (i > 0) {\r\n                return (\r\n                  <line\r\n                    key={item.id}\r\n                    x1={xScale(preData[\"year\"])}\r\n                    y1={yScaleHousehold(preData.sizeOfHousehold)}\r\n                    x2={xScale(item[\"year\"])}\r\n                    y2={yScaleHousehold(item.sizeOfHousehold)}\r\n                    stroke=\"black\"\r\n                  ></line>\r\n                );\r\n              }\r\n            })}\r\n          </g>\r\n          <g>\r\n            {mapData.map((item, i) => {\r\n              return (\r\n                <circle\r\n                  key={item.id}\r\n                  cx={xScale(item.year)}\r\n                  cy={yScaleHousehold(item.sizeOfHousehold)}\r\n                  r=\"5\"\r\n                  fill={colorScale(\"1世帯あたりの人員\")}\r\n                ></circle>\r\n              );\r\n            })}\r\n          </g>\r\n          <g>\r\n            {mapData.map((item, i) => {\r\n              const preData = i > 0 ? mapData[i - 1] : null;\r\n              if (i > 0) {\r\n                return (\r\n                  <line\r\n                    key={item.id}\r\n                    x1={xScale(preData[\"year\"])}\r\n                    y1={yScalePopulation(preData[\"population\"])}\r\n                    x2={xScale(item[\"year\"])}\r\n                    y2={yScalePopulation(item[\"population\"])}\r\n                    stroke=\"black\"\r\n                  ></line>\r\n                );\r\n              }\r\n            })}\r\n          </g>\r\n          <g>\r\n            {mapData.map((item, i) => {\r\n              return (\r\n                <circle\r\n                  transform={`translate(${xScale(\r\n                    item[\"year\"]\r\n                  )},${yScalePopulation(item[\"population\"])})`}\r\n                  key={item.id}\r\n                  cx=\"0\"\r\n                  cy=\"0\"\r\n                  r=\"5\"\r\n                  fill={colorScale(\"人口\")}\r\n                />\r\n              );\r\n            })}\r\n          </g>\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// 神奈川県の地図を描画\r\nfunction Kanagawa(props) {\r\n  // これはいろいろ変えて試してみる\r\n  const scale = 30000 * 0.7;\r\n  const colorScale = props.scale;\r\n  const [data, setData] = useState([]);\r\n  const [clickedArea, setClickedArea] = useState(null);\r\n  const margin = {\r\n    top: 10,\r\n    bottom: 10,\r\n    left: 50,\r\n    right: 100,\r\n  };\r\n  const contentWidth = 400;\r\n  const contentHeight = 300;\r\n  const svgWidth = margin.right + margin.left + contentWidth;\r\n  const svgHeight = margin.top + margin.bottom + contentHeight;\r\n  useEffect(() => {\r\n    d3.json(\"kanagawa.topojson\").then((topoSaitama) => {\r\n      const geoSaitama = topojson.feature(\r\n        topoSaitama,\r\n        topoSaitama.objects.kanagawa\r\n      ); //TopoJSON=>GeoJSO変換\r\n      const geoSaitamacp = JSON.parse(JSON.stringify(geoSaitama));\r\n      geoSaitamacp.features = [];\r\n\r\n      let i = 14101;\r\n      const arrChanged = [];\r\n      while (i <= 14402) {\r\n        const divideArray = geoSaitama.features.filter((item) => {\r\n          if (item.properties.N03_007 == i) {\r\n            return true;\r\n          } else {\r\n            return false;\r\n          }\r\n        });\r\n        // 配列の中身が空でないか\r\n        if (divideArray.length > 0) {\r\n          const tmpArray = JSON.parse(JSON.stringify(geoSaitamacp));\r\n          tmpArray.features = divideArray;\r\n          arrChanged.push(tmpArray);\r\n        }\r\n        i++;\r\n      }\r\n\r\n      const east = 138.915833,\r\n        west = 139.796111,\r\n        north = 35.672778,\r\n        south = 35.128889;\r\n      const kanagawaWidth = contentWidth;\r\n      const kanagawaHeight = contentHeight;\r\n      const aProjection = d3\r\n        // 「緯度経度の点座標」を「svg上の点座標」に変換\r\n        .geoMercator()\r\n        .center([(west + east) / 2, (north + south) / 2])\r\n        .translate([kanagawaWidth / 2, kanagawaHeight / 2])\r\n        .scale(scale);\r\n      const geoPath = d3.geoPath().projection(aProjection);\r\n\r\n      const pathes = [];\r\n      arrChanged.map((item) => {\r\n        pathes.push({\r\n          name: item.features[0].properties.N03_004,\r\n          path: geoPath(item),\r\n        });\r\n      });\r\n      setData(pathes);\r\n    });\r\n  }, []);\r\n  // 神奈川県の地図がクリックされた時に発火\r\n  function mouseEnterHandle(e) {\r\n    setClickedArea(e.currentTarget.dataset.name);\r\n  }\r\n  if (data == 0) {\r\n    return <div>loading</div>;\r\n  }\r\n  return (\r\n    <div style={{ position: \"relative\", margin: 0, padding: 0 }}>\r\n      <div>\r\n        <KanagawaGraph scale={colorScale} />\r\n        <SubAreaGraph target={clickedArea} colorScale={colorScale} />\r\n      </div>\r\n      <div style={{ position: \"absolute\", top: \"470px\", left: \"800px\" }}>\r\n        <svg\r\n          viewBox={`${-margin.left} ${-margin.top} ${svgWidth} ${svgHeight}`}\r\n          width={svgWidth}\r\n          height={svgHeight}\r\n          style={{ border: \"solid 2px\" }}\r\n        >\r\n          {data.map((item, i) => {\r\n            return (\r\n              <path\r\n                key={i}\r\n                onClick={mouseEnterHandle}\r\n                d={item.path}\r\n                data-name={item.name}\r\n                style={{\r\n                  stroke: \"black\",\r\n                  fill: clickedArea === item.name ? \"#aad5ff\" : \"white\",\r\n                  strokeWidth: \"1\",\r\n                }}\r\n              ></path>\r\n            );\r\n          })}\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default App;\r\n","import { render } from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nrender(<App />, document.querySelector(\"#content\"));\r\n"],"sourceRoot":""}