{"version":3,"sources":["Axis.js","Legend.js","SubGraph.js","KanagawaMap.js","OverallGraph.js","App.js","index.js"],"names":["VerricalAxis","scale","strokeColor","graphHeight","range","y1","y2","x1","x2","stroke","strokeWidth","transform","x","y","textAnchor","dominantBaseline","fontSize","ticks","map","i","fill","VerricalHouseAxis","graphWidth","HorizontalAxis","Legend","type","domain","item","r","SubGraph","target","colorScale","useState","eachKanagawaData","setEachKanagawaData","contentWidth","window","innerWidth","contentHeight","innerHeight","margin","svgWidth","svgHeight","useEffect","a","fetch","response","json","fetchData","length","style","width","height","border","targetData","find","name","startI","graphData","population","filter","year","Object","keys","xScale","d3","nice","yScalePopulation","class","viewBox","preData","cx","cy","KanagawaMap","props","data","setData","clickedArea","setClickedArea","deviceWidth","mouseEnterHandle","e","currentTarget","dataset","then","topoSaitama","geoSaitama","topojson","objects","kanagawa","geoSaitamacp","JSON","parse","stringify","features","arrChanged","divideArray","properties","N03_007","tmpArray","push","kanagawaWidth","kanagawaHeight","aProjection","center","translate","geoPath","projection","pathes","N03_004","path","onClick","d","OverallGraph","mapData","setMapData","yScaleHousehold","sizeOfHousehold","id","Main","Header","Footer","App","render","document","querySelector"],"mappings":"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","file":"static/js/main.508ba1db.chunk.js","sourcesContent":["export function VerricalAxis({ scale, graphHeight }) {\r\n  const strokeColor = \"#888\";\r\n  const x = 0;\r\n  const [y1, y2] = scale.range();\r\n\r\n  return (\r\n    <g>\r\n      <line\r\n        x1={x}\r\n        y1={y1}\r\n        x2={x}\r\n        y2={y2 + 2}\r\n        stroke={strokeColor}\r\n        strokeWidth=\"2\"\r\n      ></line>\r\n      <g>\r\n        <g transform=\"translate(-80, 200) rotate(-90)\">\r\n          <text\r\n            x=\"0\"\r\n            y=\"0\"\r\n            textAnchor=\"end\"\r\n            dominantBaseline=\"central\"\r\n            fontSize=\"15\"\r\n          >\r\n            人口\r\n          </text>\r\n        </g>\r\n\r\n        {scale.ticks().map((y, i) => {\r\n          return (\r\n            <g key={i} transform={`translate(0, ${scale(y)})`}>\r\n              <line x1=\"0\" y1=\"0\" x2=\"5\" y2=\"0\" stroke={strokeColor}></line>\r\n              <text\r\n                x=\"-8\"\r\n                y=\"0\"\r\n                textAnchor=\"end\"\r\n                dominantBaseline=\"central\"\r\n                fill=\"black\"\r\n                fontSize=\"12\"\r\n              >\r\n                {y}\r\n              </text>\r\n            </g>\r\n          );\r\n        })}\r\n      </g>\r\n    </g>\r\n  );\r\n}\r\n\r\nexport function VerricalHouseAxis({ scale, graphWidth }) {\r\n  const strokeColor = \"#888\";\r\n  const x = graphWidth;\r\n  const [y1, y2] = scale.range();\r\n\r\n  return (\r\n    <g>\r\n      <line\r\n        x1={x}\r\n        y1={y1}\r\n        x2={x}\r\n        y2={y2 + 2}\r\n        stroke={strokeColor}\r\n        strokeWidth=\"2\"\r\n      ></line>\r\n      <g>\r\n        <g transform={`translate(${x}, 200) rotate(-90)`}>\r\n          <text\r\n            x=\"30\"\r\n            y=\"60\"\r\n            textAnchor=\"end\"\r\n            dominantBaseline=\"central\"\r\n            fontSize=\"15\"\r\n          >\r\n            世帯平均人数\r\n          </text>\r\n        </g>\r\n\r\n        {scale.ticks().map((y, i) => {\r\n          return (\r\n            <g key={i} transform={`translate(${x}, ${scale(y)})`}>\r\n              <line x1=\"0\" y1=\"0\" x2=\"-5\" y2=\"0\" stroke={strokeColor}></line>\r\n              <text\r\n                x=\"30\"\r\n                y=\"0\"\r\n                textAnchor=\"end\"\r\n                dominantBaseline=\"central\"\r\n                fill=\"black\"\r\n                fontSize=\"12\"\r\n              >\r\n                {y}\r\n              </text>\r\n            </g>\r\n          );\r\n        })}\r\n      </g>\r\n    </g>\r\n  );\r\n}\r\n\r\nexport function HorizontalAxis({ scale, graphHeight }) {\r\n  const strokeColor = \"#888\";\r\n  const y = graphHeight;\r\n\r\n  const [x1, x2] = scale.range();\r\n  return (\r\n    <g>\r\n      <line x1={x1} y1={y} x2={x2 + 5} y2={y} stroke={strokeColor}></line>\r\n      <g>\r\n        <g transform={`translate(400, ${y + 40})`}>\r\n          <text\r\n            x=\"0\"\r\n            y=\"0\"\r\n            textAnchor=\"end\"\r\n            dominantBaseline=\"central\"\r\n            fontSize=\"15\"\r\n          >\r\n            年\r\n          </text>\r\n        </g>\r\n\r\n        {scale.ticks().map((x, i) => {\r\n          return (\r\n            <g key={i} transform={`translate(${scale(x)}, 0)`}>\r\n              <line\r\n                x1=\"0\"\r\n                y1={graphHeight}\r\n                x2=\"0\"\r\n                y2={graphHeight - 10}\r\n                stroke={strokeColor}\r\n              ></line>\r\n              <text\r\n                x=\"0\"\r\n                y={y + 15}\r\n                textAnchor=\"middle\"\r\n                dominantBaseline=\"central\"\r\n                fontSize=\"12\"\r\n              >\r\n                {x}\r\n              </text>\r\n            </g>\r\n          );\r\n        })}\r\n      </g>\r\n    </g>\r\n  );\r\n}\r\n","function Legend({ scale, type, graphWidth }) {\r\n  if (type === \"main\") {\r\n    return (\r\n      <g transform={`translate(150,0)`}>\r\n        {scale.domain().map((item, i) => {\r\n          return (\r\n            <g\r\n              key={i}\r\n              transform={`translate(${graphWidth - 80}, ${20 + i * 15})`}\r\n            >\r\n              <circle r=\"5\" fill={scale(item)} />\r\n              <text x=\"10\" fontSize=\"11\" dominantBaseline=\"central\">\r\n                {item}\r\n              </text>\r\n            </g>\r\n          );\r\n        })}\r\n      </g>\r\n    );\r\n  } else {\r\n    return (\r\n      <g transform={`translate(150,0)`}>\r\n        {scale.domain().map((item, i) => {\r\n          if (i === 1) {\r\n            return (\r\n              <g\r\n                key={i}\r\n                transform={`translate(${graphWidth - 50}, ${20 + i * 15})`}\r\n              >\r\n                <circle r=\"5\" fill={scale(item)} />\r\n                <text x=\"10\" fontSize=\"11\" dominantBaseline=\"central\">\r\n                  {item}\r\n                </text>\r\n              </g>\r\n            );\r\n          }\r\n        })}\r\n      </g>\r\n    );\r\n  }\r\n}\r\nexport default Legend;\r\n","import { useEffect, useState } from \"react\";\r\nimport { VerricalAxis, HorizontalAxis } from \"./Axis\";\r\nimport * as d3 from \"d3\";\r\nimport Legend from \"./Legend\";\r\n\r\nfunction SubGraph({ target, colorScale }) {\r\n  const [eachKanagawaData, setEachKanagawaData] = useState([]);\r\n  const deviceWidth = window.innerWidth;\r\n  const deviceHeight = window.innerHeight;\r\n  const contentWidth = deviceWidth * 0.4;\r\n  const contentHeight = deviceHeight * 0.5;\r\n  const margin = {\r\n    top: 10,\r\n    bottom: 50,\r\n    left: 100,\r\n    right: 180,\r\n  };\r\n  const svgWidth = margin.right + margin.left + contentWidth;\r\n  const svgHeight = margin.top + margin.bottom + contentHeight;\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const response = await fetch(\"kanagawa3.json\");\r\n      const fetchData = await response.json();\r\n      setEachKanagawaData(fetchData);\r\n    })();\r\n  }, []);\r\n  if (eachKanagawaData.length === 0 || target === null) {\r\n    return (\r\n      <div>\r\n        <h2>市区町村別のグラフ</h2>\r\n        <div\r\n          style={{\r\n            width: svgWidth,\r\n            height: svgHeight,\r\n            border: \"solid 2px\",\r\n          }}\r\n        ></div>\r\n      </div>\r\n    );\r\n  }\r\n  const targetData = eachKanagawaData.find((item) => item.name === target);\r\n\r\n  let startI = 1970;\r\n  const graphDataTmp = targetData.population.filter((item) => {\r\n    if (item[startI] !== null) {\r\n      startI += 5;\r\n      return true;\r\n    } else {\r\n      startI += 5;\r\n      return false;\r\n    }\r\n  });\r\n\r\n  const graphData = graphDataTmp.map((item) => {\r\n    const year = Object.keys(item)[0];\r\n    return {\r\n      year: year,\r\n      population: item[year],\r\n    };\r\n  });\r\n\r\n  const xScale = d3\r\n    .scaleLinear()\r\n    .domain(d3.extent(graphData, (item) => item.year))\r\n    .range([0, contentWidth])\r\n    .nice();\r\n  const yScalePopulation = d3\r\n    .scaleLinear()\r\n    .domain([0, d3.extent(graphData, (item) => item.population)[1]])\r\n    .range([contentHeight, 0]);\r\n  return (\r\n    <div class=\"box\">\r\n      <h2>市区町村別のグラフ : {target}</h2>\r\n      <div>\r\n        <svg\r\n          viewBox={`${-margin.left} ${-margin.top} ${svgWidth} ${svgHeight}`}\r\n          width={svgWidth}\r\n          height={svgHeight}\r\n          style={{ border: \"solid 2px\" }}\r\n        >\r\n          <Legend scale={colorScale} type=\"sub\" graphWidth={contentWidth} />\r\n          <VerricalAxis scale={yScalePopulation} graphHeight={contentHeight} />\r\n          <HorizontalAxis scale={xScale} graphHeight={contentHeight} />\r\n\r\n          <g>\r\n            {graphData.map((item, i) => {\r\n              const preData = i > 0 ? graphData[i - 1] : null;\r\n              if (i > 0) {\r\n                return (\r\n                  <line\r\n                    key={i}\r\n                    x1={xScale(preData[\"year\"])}\r\n                    y1={yScalePopulation(preData[\"population\"])}\r\n                    x2={xScale(item[\"year\"])}\r\n                    y2={yScalePopulation(item[\"population\"])}\r\n                    stroke=\"black\"\r\n                  ></line>\r\n                );\r\n              }\r\n            })}\r\n          </g>\r\n          <g>\r\n            {graphData.map((item, i) => {\r\n              return (\r\n                <circle\r\n                  transform={`translate(${xScale(\r\n                    item[\"year\"]\r\n                  )},${yScalePopulation(item[\"population\"])})`}\r\n                  key={i}\r\n                  cx=\"0\"\r\n                  cy=\"0\"\r\n                  r=\"5\"\r\n                  fill={colorScale(\"population\")}\r\n                />\r\n              );\r\n            })}\r\n          </g>\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default SubGraph;\r\n","import * as topojson from \"topojson\";\r\nimport * as d3 from \"d3\";\r\nimport { useEffect, useState } from \"react\";\r\nimport SubGraph from \"./SubGraph\";\r\nfunction KanagawaMap(props) {\r\n  const scale = 30000 * 0.7;\r\n  const colorScale = props.scale;\r\n  const [data, setData] = useState([]);\r\n  const [clickedArea, setClickedArea] = useState(null);\r\n  const margin = {\r\n    top: 10,\r\n    bottom: 10,\r\n    left: 50,\r\n    right: 100,\r\n  };\r\n  const deviceWidth = window.innerWidth;\r\n  const deviceHeight = window.innerHeight;\r\n  const contentWidth = deviceWidth * 0.25;\r\n  const contentHeight = contentWidth * 0.7;\r\n  const svgWidth = margin.right + margin.left + contentWidth;\r\n  const svgHeight = margin.top + margin.bottom + contentHeight;\r\n  useEffect(() => {\r\n    d3.json(\"kanagawa.topojson\").then((topoSaitama) => {\r\n      const geoSaitama = topojson.feature(\r\n        topoSaitama,\r\n        topoSaitama.objects.kanagawa\r\n      ); //TopoJSON=>GeoJSO変換\r\n      const geoSaitamacp = JSON.parse(JSON.stringify(geoSaitama));\r\n      geoSaitamacp.features = [];\r\n\r\n      let i = 14101;\r\n      const arrChanged = [];\r\n      while (i <= 14402) {\r\n        const divideArray = geoSaitama.features.filter((item) => {\r\n          if (item.properties.N03_007 == i) {\r\n            return true;\r\n          } else {\r\n            return false;\r\n          }\r\n        });\r\n        // 配列の中身が空でないか\r\n        if (divideArray.length > 0) {\r\n          const tmpArray = JSON.parse(JSON.stringify(geoSaitamacp));\r\n          tmpArray.features = divideArray;\r\n          arrChanged.push(tmpArray);\r\n        }\r\n        i++;\r\n      }\r\n\r\n      const east = 138.915833,\r\n        west = 139.796111,\r\n        north = 35.672778,\r\n        south = 35.128889;\r\n      const kanagawaWidth = contentWidth;\r\n      const kanagawaHeight = contentHeight;\r\n      const aProjection = d3\r\n        // 「緯度経度の点座標」を「svg上の点座標」に変換\r\n        .geoMercator()\r\n        .center([(west + east) / 2, (north + south) / 2])\r\n        .translate([kanagawaWidth / 2, kanagawaHeight / 2])\r\n        .scale(scale);\r\n      const geoPath = d3.geoPath().projection(aProjection);\r\n\r\n      const pathes = [];\r\n      arrChanged.map((item) => {\r\n        pathes.push({\r\n          name: item.features[0].properties.N03_004,\r\n          path: geoPath(item),\r\n        });\r\n      });\r\n      setData(pathes);\r\n    });\r\n  }, []);\r\n  // 神奈川県の地図がクリックされた時に発火\r\n  function mouseEnterHandle(e) {\r\n    setClickedArea(e.currentTarget.dataset.name);\r\n  }\r\n  if (data == 0) {\r\n    return <div>loading</div>;\r\n  }\r\n  return (\r\n    <div class=\"columns\">\r\n      <div class=\"column\">\r\n        <div class=\"box\">\r\n          <svg\r\n            viewBox={`${-margin.left} ${-margin.top} ${svgWidth} ${svgHeight}`}\r\n            width={svgWidth}\r\n            height={svgHeight}\r\n            style={{ border: \"solid 2px\" }}\r\n          >\r\n            {data.map((item, i) => {\r\n              return (\r\n                <path\r\n                  key={i}\r\n                  onClick={mouseEnterHandle}\r\n                  d={item.path}\r\n                  data-name={item.name}\r\n                  style={{\r\n                    stroke: \"black\",\r\n                    fill: clickedArea === item.name ? \"#aad5ff\" : \"white\",\r\n                    strokeWidth: \"1\",\r\n                  }}\r\n                ></path>\r\n              );\r\n            })}\r\n          </svg>\r\n        </div>\r\n      </div>\r\n      <div class=\"column\">\r\n        <SubGraph target={clickedArea} colorScale={colorScale} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default KanagawaMap;\r\n","import * as d3 from \"d3\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { VerricalAxis, VerricalHouseAxis, HorizontalAxis } from \"./Axis\";\r\nimport Legend from \"./Legend\";\r\n\r\nfunction OverallGraph(props) {\r\n  const colorScale = props.scale;\r\n  const [mapData, setMapData] = useState([]);\r\n  const margin = {\r\n    top: 10,\r\n    bottom: 50,\r\n    left: 100,\r\n    right: 180,\r\n  };\r\n  const deviceWidth = window.innerWidth;\r\n  const deviceHeight = window.innerHeight;\r\n  const contentWidth = deviceWidth * 0.5;\r\n  const contentHeight = deviceHeight * 0.6;\r\n  const svgWidth = margin.right + margin.left + contentWidth;\r\n  const svgHeight = margin.top + margin.bottom + contentHeight;\r\n  useEffect(() => {\r\n    (async () => {\r\n      const response = await fetch(\"kanagawa1.json\");\r\n      const fetchData = await response.json();\r\n      setMapData(fetchData);\r\n    })();\r\n  }, []);\r\n\r\n  if (mapData.length == 0) {\r\n    return <div>loading</div>;\r\n  }\r\n\r\n  // scalelinier:変数変換\r\n  const xScale = d3\r\n    .scaleLinear()\r\n    // dommain(a,b): 元の座標の最小、最大ヲ指定\r\n    // d3.extent(array):return : [array_min, array_max]\r\n    .domain(d3.extent(mapData, (item) => item[\"year\"]))\r\n    // range:出力の最大、最小値\r\n    .range([0, contentWidth])\r\n    .nice();\r\n  const yScaleHousehold = d3\r\n    .scaleLinear()\r\n    .domain([0, d3.extent(mapData, (item) => item[\"sizeOfHousehold\"])[1]])\r\n    .range([contentHeight, 0]);\r\n\r\n  const yScalePopulation = d3\r\n    .scaleLinear()\r\n    .domain([0, d3.extent(mapData, (item) => item[\"population\"])[1]])\r\n    .range([contentHeight, 0]);\r\n  return (\r\n    <div class=\"columns is-centered\">\r\n      <div class=\" column is-9 mt-3\">\r\n        <div class=\"box\">\r\n          <h2>神奈川県全体のグラフ</h2>\r\n          <div>\r\n            <svg\r\n              viewBox={`${-margin.left} ${-margin.top} ${svgWidth} ${svgHeight}`}\r\n              width={svgWidth}\r\n              height={svgHeight}\r\n            >\r\n              <Legend\r\n                scale={colorScale}\r\n                type=\"main\"\r\n                graphWidth={contentWidth}\r\n              />\r\n              <VerricalAxis scale={yScalePopulation} />\r\n              <HorizontalAxis scale={xScale} graphHeight={contentHeight} />\r\n              <VerricalHouseAxis\r\n                scale={yScaleHousehold}\r\n                graphWidth={contentWidth}\r\n              />\r\n              <g>\r\n                {mapData.map((item, i) => {\r\n                  const preData = i > 0 ? mapData[i - 1] : null;\r\n                  if (i > 0) {\r\n                    return (\r\n                      <line\r\n                        key={item.id}\r\n                        x1={xScale(preData[\"year\"])}\r\n                        y1={yScaleHousehold(preData.sizeOfHousehold)}\r\n                        x2={xScale(item[\"year\"])}\r\n                        y2={yScaleHousehold(item.sizeOfHousehold)}\r\n                        stroke={colorScale(\"sizeOfHousehold\")}\r\n                      ></line>\r\n                    );\r\n                  }\r\n                })}\r\n              </g>\r\n              <g>\r\n                {mapData.map((item, i) => {\r\n                  return (\r\n                    <circle\r\n                      key={item.id}\r\n                      cx={xScale(item.year)}\r\n                      cy={yScaleHousehold(item.sizeOfHousehold)}\r\n                      r=\"5\"\r\n                      fill={colorScale(\"sizeOfHousehold\")}\r\n                    ></circle>\r\n                  );\r\n                })}\r\n              </g>\r\n              <g>\r\n                {mapData.map((item, i) => {\r\n                  const preData = i > 0 ? mapData[i - 1] : null;\r\n                  if (i > 0) {\r\n                    return (\r\n                      <line\r\n                        key={item.id}\r\n                        x1={xScale(preData[\"year\"])}\r\n                        y1={yScalePopulation(preData[\"population\"])}\r\n                        x2={xScale(item[\"year\"])}\r\n                        y2={yScalePopulation(item[\"population\"])}\r\n                        stroke={colorScale(\"population\")}\r\n                      ></line>\r\n                    );\r\n                  }\r\n                })}\r\n              </g>\r\n              <g>\r\n                {mapData.map((item, i) => {\r\n                  return (\r\n                    <circle\r\n                      transform={`translate(${xScale(\r\n                        item[\"year\"]\r\n                      )},${yScalePopulation(item[\"population\"])})`}\r\n                      key={item.id}\r\n                      cx=\"0\"\r\n                      cy=\"0\"\r\n                      r=\"5\"\r\n                      fill={colorScale(\"population\")}\r\n                    />\r\n                  );\r\n                })}\r\n              </g>\r\n            </svg>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default OverallGraph;\r\n","import * as d3 from \"d3\";\r\nimport KanagawaMap from \"./KanagawaMap\";\r\nimport OverallGraph from \"./OverallGraph\";\r\nimport \"bulma/css/bulma.css\";\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <Main />\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Main() {\r\n  const colorScale = d3.scaleOrdinal(d3.schemeCategory10);\r\n  return (\r\n    <div>\r\n      <OverallGraph scale={colorScale} />\r\n      <KanagawaMap scale={colorScale} />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Header() {\r\n  return (\r\n    <header>\r\n      <div class=\"hero is-success\">\r\n        <div class=\"hero-body\">\r\n          <p class=\"title\">Kanagawa Visualizar</p>\r\n          <p class=\"subtitle\">Success subtitle</p>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\nfunction Footer() {\r\n  return (\r\n    <footer class=\"footer\">\r\n      <div class=\"content has-text-centered\">\r\n        <p>kanagawa visualizar</p>\r\n      </div>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { render } from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nrender(<App />, document.querySelector(\"#content\"));\r\n"],"sourceRoot":""}