{"version":3,"sources":["Axis.js","Legend.js","SubGraph.js","KanagawaMap.js","OverallGraph.js","App.js","index.js"],"names":["VerricalAxis","scale","graphHeight","strokeColor","range","y1","y2","deviceWidth","window","innerWidth","x1","x2","stroke","strokeWidth","transform","x","y","textAnchor","dominantBaseline","fontSize","ticks","map","i","fill","VerricalHouseAxis","graphWidth","HorizontalAxis","Legend","type","domain","item","r","SubGraph","target","colorScale","useState","eachKanagawaData","setEachKanagawaData","deviceHeight","innerHeight","contentWidth","contentHeight","margin","svgWidth","svgHeight","useEffect","a","fetch","response","json","fetchData","length","className","style","width","height","position","max","top","bottom","textAlign","targetData","find","name","startI","graphData","population","filter","year","Object","keys","xScale","d3","nice","yScalePopulation","viewBox","preData","cx","cy","KanagawaMap","props","mapData","setMapData","clickedArea","setClickedArea","mouseEnterHandle","e","currentTarget","dataset","then","topoData","pathData","topojson","objects","kanagawa","jsonData","features","pathDataNum","arrChanged","divideArray","properties","N03_007","tmpArray","push","kanagawaWidth","kanagawaHeight","aProjection","center","translate","geoPath","projection","pathes","N03_004","path","marginBottom","marginLeft","onClick","d","OverallGraph","yScaleHousehold","sizeOfHousehold","id","Main","Header","Footer","App","render","document","querySelector"],"mappings":"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","file":"static/js/main.60169b2f.chunk.js","sourcesContent":["export function VerricalAxis({ scale, graphHeight }) {\r\n  const strokeColor = \"#888\";\r\n  const x = 0;\r\n  const [y1, y2] = scale.range();\r\n  const deviceWidth = window.innerWidth;\r\n  return (\r\n    <g>\r\n      <line\r\n        x1={x}\r\n        y1={y1}\r\n        x2={x}\r\n        y2={y2 + 2}\r\n        stroke={strokeColor}\r\n        strokeWidth=\"2\"\r\n      ></line>\r\n      <g>\r\n        <g transform={`translate(-80, ${graphHeight / 2}) rotate(-90)`}>\r\n          <text\r\n            x=\"0\"\r\n            y=\"0\"\r\n            textAnchor=\"end\"\r\n            dominantBaseline=\"central\"\r\n            fontSize={deviceWidth > 768 ? \"15\" : \"12\"}\r\n          >\r\n            人口\r\n          </text>\r\n        </g>\r\n\r\n        {scale.ticks().map((y, i) => {\r\n          return (\r\n            <g key={i} transform={`translate(0, ${scale(y)})`}>\r\n              <line x1=\"0\" y1=\"0\" x2=\"5\" y2=\"0\" stroke={strokeColor}></line>\r\n              <text\r\n                x=\"-8\"\r\n                y=\"0\"\r\n                textAnchor=\"end\"\r\n                dominantBaseline=\"central\"\r\n                fill=\"black\"\r\n                fontSize={deviceWidth > 768 ? \"12\" : \"10\"}\r\n              >\r\n                {y}\r\n              </text>\r\n            </g>\r\n          );\r\n        })}\r\n      </g>\r\n    </g>\r\n  );\r\n}\r\n\r\nexport function VerricalHouseAxis({ scale, graphWidth }) {\r\n  const strokeColor = \"#888\";\r\n  const x = graphWidth;\r\n  const [y1, y2] = scale.range();\r\n  const deviceWidth = window.innerWidth;\r\n\r\n  return (\r\n    <g>\r\n      <line\r\n        x1={x}\r\n        y1={y1}\r\n        x2={x}\r\n        y2={y2 + 2}\r\n        stroke={strokeColor}\r\n        strokeWidth=\"2\"\r\n      ></line>\r\n      <g>\r\n        <g transform={`translate(${x}, 200) rotate(-90)`}>\r\n          <text\r\n            x=\"30\"\r\n            y=\"60\"\r\n            textAnchor=\"end\"\r\n            dominantBaseline=\"central\"\r\n            fontSize={deviceWidth > 768 ? \"15\" : \"12\"}\r\n          >\r\n            世帯平均人数\r\n          </text>\r\n        </g>\r\n\r\n        {scale.ticks().map((y, i) => {\r\n          return (\r\n            <g key={i} transform={`translate(${x}, ${scale(y)})`}>\r\n              <line x1=\"0\" y1=\"0\" x2=\"-5\" y2=\"0\" stroke={strokeColor}></line>\r\n              <text\r\n                x=\"30\"\r\n                y=\"0\"\r\n                textAnchor=\"end\"\r\n                dominantBaseline=\"central\"\r\n                fill=\"black\"\r\n                fontSize={deviceWidth > 768 ? \"12\" : \"10\"}\r\n              >\r\n                {y}\r\n              </text>\r\n            </g>\r\n          );\r\n        })}\r\n      </g>\r\n    </g>\r\n  );\r\n}\r\n\r\nexport function HorizontalAxis({ scale, graphWidth, graphHeight }) {\r\n  const strokeColor = \"#888\";\r\n  const y = graphHeight;\r\n  const deviceWidth = window.innerWidth;\r\n\r\n  const [x1, x2] = scale.range();\r\n  return (\r\n    <g>\r\n      <line x1={x1} y1={y} x2={x2 + 5} y2={y} stroke={strokeColor}></line>\r\n      <g>\r\n        <g transform={`translate(${graphWidth / 2}, ${y + 40})`}>\r\n          <text\r\n            x=\"0\"\r\n            y=\"0\"\r\n            textAnchor=\"end\"\r\n            dominantBaseline=\"central\"\r\n            fontSize=\"15\"\r\n          >\r\n            年\r\n          </text>\r\n        </g>\r\n\r\n        {scale.ticks().map((x, i) => {\r\n          return (\r\n            <g key={i} transform={`translate(${scale(x)}, 0)`}>\r\n              <line\r\n                x1=\"0\"\r\n                y1={graphHeight}\r\n                x2=\"0\"\r\n                y2={graphHeight - 10}\r\n                stroke={strokeColor}\r\n              ></line>\r\n              <text\r\n                x=\"0\"\r\n                y={y + 15}\r\n                textAnchor=\"middle\"\r\n                dominantBaseline=\"central\"\r\n                fontSize={deviceWidth > 768 ? \"12\" : \"10\"}\r\n              >\r\n                {x}\r\n              </text>\r\n            </g>\r\n          );\r\n        })}\r\n      </g>\r\n    </g>\r\n  );\r\n}\r\n","function Legend({ scale, type, graphWidth }) {\r\n  const deviceWidth = window.innerWidth;\r\n\r\n  if (type === \"main\") {\r\n    return (\r\n      <g\r\n        transform={`translate(${deviceWidth > 768 ? 150 : -100},${\r\n          deviceWidth > 768 ? 0 : 190\r\n        })`}\r\n      >\r\n        {scale.domain().map((item, i) => {\r\n          return (\r\n            <g\r\n              key={i}\r\n              transform={`translate(${graphWidth - 80}, ${20 + i * 15})`}\r\n            >\r\n              <circle r=\"5\" fill={scale(item)} />\r\n              <text x=\"10\" fontSize=\"11\" dominantBaseline=\"central\">\r\n                {item}\r\n              </text>\r\n            </g>\r\n          );\r\n        })}\r\n      </g>\r\n    );\r\n  } else {\r\n    return (\r\n      <g transform={`translate(150,0)`}>\r\n        {scale.domain().map((item, i) => {\r\n          if (i === 1) {\r\n            return (\r\n              <g\r\n                key={i}\r\n                transform={`translate(${\r\n                  deviceWidth > 768 ? graphWidth - 100 : -50\r\n                }, ${deviceWidth > 768 ? 20 + i * 15 : 240})`}\r\n              >\r\n                <circle r=\"5\" fill={scale(item)} />\r\n                <text x=\"10\" fontSize=\"11\" dominantBaseline=\"central\">\r\n                  {item}\r\n                </text>\r\n              </g>\r\n            );\r\n          }\r\n        })}\r\n      </g>\r\n    );\r\n  }\r\n}\r\nexport default Legend;\r\n","import { useEffect, useState } from \"react\";\r\nimport { VerricalAxis, HorizontalAxis } from \"./Axis\";\r\nimport * as d3 from \"d3\";\r\nimport Legend from \"./Legend\";\r\n\r\nfunction SubGraph({ target, colorScale }) {\r\n  const [eachKanagawaData, setEachKanagawaData] = useState([]);\r\n  const deviceWidth = window.innerWidth;\r\n  const deviceHeight = window.innerHeight;\r\n  const contentWidth =\r\n    deviceWidth > 768 ? deviceWidth * 0.4 : deviceWidth * 0.65;\r\n  const contentHeight =\r\n    deviceWidth > 768 ? deviceHeight * 0.5 : contentWidth * 0.7;\r\n  const margin = {\r\n    top: 10,\r\n    bottom: deviceWidth > 768 ? 50 : 90,\r\n    left: deviceWidth > 768 ? 100 : 55,\r\n    right: deviceWidth > 768 ? 180 : 55,\r\n  };\r\n  const svgWidth = margin.right + margin.left + contentWidth;\r\n  const svgHeight = margin.top + margin.bottom + contentHeight;\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const response = await fetch(\"kanagawa3.json\");\r\n      const fetchData = await response.json();\r\n      setEachKanagawaData(fetchData);\r\n    })();\r\n  }, []);\r\n  if (eachKanagawaData.length === 0) {\r\n    return (\r\n      <div className=\"box\">\r\n        <h2>市区町村別のグラフ</h2>\r\n        <div\r\n          style={{\r\n            width: svgWidth * 0.9,\r\n            height: svgHeight,\r\n            position: \"relative\",\r\n          }}\r\n        >\r\n          <progress\r\n            className=\"progress is-small is-success\"\r\n            max=\"100\"\r\n            style={{\r\n              position: \"absolute\",\r\n              top: 0,\r\n              bottom: 0,\r\n              margin: \"auto\",\r\n            }}\r\n          ></progress>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else if (target === null) {\r\n    return (\r\n      <div className=\"box\">\r\n        <h2>市区町村別のグラフ</h2>\r\n        <div\r\n          style={{\r\n            width: svgWidth,\r\n            height: svgHeight,\r\n            position: \"relative\",\r\n          }}\r\n        >\r\n          <p\r\n            style={{\r\n              position: \"absolute\",\r\n              top: 0,\r\n              bottom: 0,\r\n              margin: \"auto\",\r\n              textAlign: \"center\",\r\n              height: \"50px\",\r\n            }}\r\n          >\r\n            左の神奈川県の地図をクリックするとここにグラフが表示されます。\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  const targetData = eachKanagawaData.find((item) => item.name === target);\r\n\r\n  let startI = 1970;\r\n  const graphDataTmp = targetData.population.filter((item) => {\r\n    if (item[startI] !== null) {\r\n      startI += 5;\r\n      return true;\r\n    } else {\r\n      startI += 5;\r\n      return false;\r\n    }\r\n  });\r\n\r\n  const graphData = graphDataTmp.map((item) => {\r\n    const year = Object.keys(item)[0];\r\n    return {\r\n      year: year,\r\n      population: item[year],\r\n    };\r\n  });\r\n\r\n  const xScale = d3\r\n    .scaleLinear()\r\n    .domain(d3.extent(graphData, (item) => item.year))\r\n    .range([0, contentWidth])\r\n    .nice();\r\n  const yScalePopulation = d3\r\n    .scaleLinear()\r\n    .domain([0, d3.extent(graphData, (item) => item.population)[1]])\r\n    .range([contentHeight, 0]);\r\n  return (\r\n    <div className=\"box\">\r\n      <h2>市区町村別のグラフ : {target}</h2>\r\n      <div>\r\n        <svg\r\n          viewBox={`${-margin.left} ${-margin.top} ${svgWidth} ${svgHeight}`}\r\n          width={svgWidth}\r\n          height={svgHeight}\r\n        >\r\n          <Legend scale={colorScale} type=\"sub\" graphWidth={contentWidth} />\r\n          <VerricalAxis scale={yScalePopulation} graphHeight={contentHeight} />\r\n          <HorizontalAxis\r\n            scale={xScale}\r\n            graphWidth={contentWidth}\r\n            graphHeight={contentHeight}\r\n          />\r\n\r\n          <g>\r\n            {graphData.map((item, i) => {\r\n              const preData = i > 0 ? graphData[i - 1] : null;\r\n              if (i > 0) {\r\n                return (\r\n                  <line\r\n                    key={i}\r\n                    x1={xScale(preData[\"year\"])}\r\n                    y1={yScalePopulation(preData[\"population\"])}\r\n                    x2={xScale(item[\"year\"])}\r\n                    y2={yScalePopulation(item[\"population\"])}\r\n                    stroke={colorScale(\"人口\")}\r\n                  ></line>\r\n                );\r\n              }\r\n            })}\r\n          </g>\r\n          <g>\r\n            {graphData.map((item, i) => {\r\n              return (\r\n                <circle\r\n                  transform={`translate(${xScale(\r\n                    item[\"year\"]\r\n                  )},${yScalePopulation(item[\"population\"])})`}\r\n                  key={i}\r\n                  cx=\"0\"\r\n                  cy=\"0\"\r\n                  r=\"5\"\r\n                  fill={colorScale(\"人口\")}\r\n                />\r\n              );\r\n            })}\r\n          </g>\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default SubGraph;\r\n","import * as topojson from \"topojson\";\r\nimport * as d3 from \"d3\";\r\nimport { useEffect, useState } from \"react\";\r\nimport SubGraph from \"./SubGraph\";\r\nfunction KanagawaMap(props) {\r\n  const scale = 30000 * 0.7;\r\n  const colorScale = props.scale;\r\n  const [mapData, setMapData] = useState([]);\r\n  const [clickedArea, setClickedArea] = useState(null);\r\n  const margin = {\r\n    top: 10,\r\n    bottom: 10,\r\n    left: 50,\r\n    right: 50,\r\n  };\r\n  const deviceWidth = window.innerWidth;\r\n  const contentWidth =\r\n    deviceWidth > 768 ? deviceWidth * 0.25 : deviceWidth * 0.6;\r\n  const contentHeight = deviceWidth > 768 ? contentWidth * 0.7 : contentWidth;\r\n  const svgWidth = margin.right + margin.left + contentWidth;\r\n  const svgHeight = margin.top + margin.bottom + contentHeight;\r\n  useEffect(() => {\r\n    d3.json(\"kanagawa.topojson\").then((topoData) => {\r\n      const pathData = topojson.feature(topoData, topoData.objects.kanagawa); //TopoJSON=>GeoJSO変換\r\n      const jsonData = { ...pathData };\r\n      jsonData.features = [];\r\n\r\n      const KANAGAWA_START_NUM = 14101;\r\n      const KANAGAWA_END_NUM = 14402;\r\n      let pathDataNum = KANAGAWA_START_NUM;\r\n      const arrChanged = [];\r\n\r\n      while (pathDataNum <= KANAGAWA_END_NUM) {\r\n        const divideArray = pathData.features.filter((item) => {\r\n          return item.properties.N03_007 == pathDataNum ? true : false;\r\n        });\r\n        // 配列の中身が空でないか\r\n        if (divideArray.length > 0) {\r\n          const tmpArray = { ...jsonData };\r\n          tmpArray.features = divideArray;\r\n          arrChanged.push(tmpArray);\r\n        }\r\n        pathDataNum++;\r\n      }\r\n\r\n      const east = 138.915833,\r\n        west = 139.796111,\r\n        north = 35.672778,\r\n        south = 35.128889;\r\n      const kanagawaWidth = contentWidth;\r\n      const kanagawaHeight = contentHeight;\r\n      const aProjection = d3\r\n        // 「緯度経度の点座標」を「svg上の点座標」に変換\r\n        .geoMercator()\r\n        .center([(west + east) / 2, (north + south) / 2])\r\n        .translate([kanagawaWidth / 2, kanagawaHeight / 2])\r\n        .scale(scale);\r\n      const geoPath = d3.geoPath().projection(aProjection);\r\n\r\n      const pathes = [];\r\n      arrChanged.map((item) => {\r\n        pathes.push({\r\n          name: item.features[0].properties.N03_004,\r\n          path: geoPath(item),\r\n        });\r\n      });\r\n      setMapData(pathes);\r\n    });\r\n  }, []);\r\n  // 神奈川県の地図がクリックされた時に発火\r\n  function mouseEnterHandle(e) {\r\n    setClickedArea(e.currentTarget.dataset.name);\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className=\"columns is-multiline\"\r\n      style={{\r\n        marginBottom: \"50px\",\r\n        marginLeft: deviceWidth > 768 ? \"20px\" : \"0\",\r\n      }}\r\n    >\r\n      <div className=\"column is-4\">\r\n        <div className=\"box\">\r\n          {mapData.length === 0 ? (\r\n            <div\r\n              style={{\r\n                width: svgWidth * 0.8,\r\n                height: svgHeight,\r\n                position: \"relative\",\r\n              }}\r\n            >\r\n              <progress\r\n                className=\"progress is-small is-success\"\r\n                max=\"100\"\r\n                style={{\r\n                  position: \"absolute\",\r\n                  top: 0,\r\n                  bottom: 0,\r\n                  margin: \"auto\",\r\n                }}\r\n              ></progress>\r\n            </div>\r\n          ) : (\r\n            <svg\r\n              viewBox={`${-margin.left} ${-margin.top} ${svgWidth} ${svgHeight}`}\r\n              width={svgWidth}\r\n              height={svgHeight}\r\n            >\r\n              {mapData.map((item, i) => {\r\n                return (\r\n                  <path\r\n                    key={i}\r\n                    onClick={mouseEnterHandle}\r\n                    d={item.path}\r\n                    data-name={item.name}\r\n                    style={{\r\n                      stroke: \"\t#7f7f7f\",\r\n                      fill: clickedArea === item.name ? \"#aad5ff\" : \"#fff\",\r\n                      strokeWidth: \"1\",\r\n                    }}\r\n                  ></path>\r\n                );\r\n              })}\r\n            </svg>\r\n          )}\r\n        </div>\r\n      </div>\r\n      <div className=\"column is-7\">\r\n        <SubGraph target={clickedArea} colorScale={colorScale} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default KanagawaMap;\r\n","import * as d3 from \"d3\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { VerricalAxis, VerricalHouseAxis, HorizontalAxis } from \"./Axis\";\r\nimport Legend from \"./Legend\";\r\n\r\nfunction OverallGraph(props) {\r\n  const colorScale = props.scale;\r\n  const deviceWidth = window.innerWidth;\r\n  const [mapData, setMapData] = useState([]);\r\n  const margin = {\r\n    top: 10,\r\n    bottom: deviceWidth > 768 ? 50 : 90,\r\n    left: deviceWidth > 768 ? 100 : 55,\r\n    right: deviceWidth > 768 ? 180 : 55,\r\n  };\r\n\r\n  const contentWidth =\r\n    deviceWidth > 768 ? deviceWidth * 0.6 : deviceWidth * 0.6;\r\n  const contentHeight = contentWidth * 0.6;\r\n  const svgWidth = margin.right + margin.left + contentWidth;\r\n  const svgHeight = margin.top + margin.bottom + contentHeight;\r\n  useEffect(() => {\r\n    (async () => {\r\n      const response = await fetch(\"kanagawa1.json\");\r\n      const fetchData = await response.json();\r\n      setMapData(fetchData);\r\n    })();\r\n  }, []);\r\n\r\n  if (mapData.length == 0) {\r\n    return (\r\n      <div className=\"columns is-centered\">\r\n        <div className=\" column is-9 mt-3\">\r\n          <div className=\"box\">\r\n            <h2>神奈川県全体のグラフ</h2>\r\n            <div>\r\n              <div\r\n                style={{\r\n                  width: svgWidth,\r\n                  height: svgHeight,\r\n                  position: \"relative\",\r\n                }}\r\n              >\r\n                <progress\r\n                  className=\"progress is-small is-success\"\r\n                  max=\"100\"\r\n                  style={{\r\n                    position: \"absolute\",\r\n                    top: 0,\r\n                    bottom: 0,\r\n                    margin: \"auto\",\r\n                  }}\r\n                ></progress>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // scalelinier:変数変換\r\n  const xScale = d3\r\n    .scaleLinear()\r\n    // dommain(a,b): 元の座標の最小、最大ヲ指定\r\n    // d3.extent(array):return : [array_min, array_max]\r\n    .domain(d3.extent(mapData, (item) => item[\"year\"]))\r\n    // range:出力の最大、最小値\r\n    .range([0, contentWidth])\r\n    .nice();\r\n  const yScaleHousehold = d3\r\n    .scaleLinear()\r\n    .domain([0, d3.extent(mapData, (item) => item[\"sizeOfHousehold\"])[1]])\r\n    .range([contentHeight, 0]);\r\n\r\n  const yScalePopulation = d3\r\n    .scaleLinear()\r\n    .domain([0, d3.extent(mapData, (item) => item[\"population\"])[1]])\r\n    .range([contentHeight, 0]);\r\n  return (\r\n    <div className=\"columns is-centered is-mobile is-multiline\">\r\n      <div className=\" column is-10-desktop is-full-mobile mt-3\">\r\n        <div className=\"box\">\r\n          <h2>神奈川県全体のグラフ</h2>\r\n          <div>\r\n            <svg\r\n              viewBox={`${-margin.left} ${-margin.top} ${svgWidth} ${svgHeight}`}\r\n              width={svgWidth}\r\n              height={svgHeight}\r\n            >\r\n              <Legend\r\n                scale={colorScale}\r\n                type=\"main\"\r\n                graphWidth={contentWidth}\r\n              />\r\n              <VerricalAxis\r\n                scale={yScalePopulation}\r\n                graphHeight={contentHeight}\r\n              />\r\n              <HorizontalAxis\r\n                scale={xScale}\r\n                graphWidth={contentWidth}\r\n                graphHeight={contentHeight}\r\n              />\r\n              <VerricalHouseAxis\r\n                scale={yScaleHousehold}\r\n                graphWidth={contentWidth}\r\n              />\r\n              <g>\r\n                {mapData.map((item, i) => {\r\n                  const preData = i > 0 ? mapData[i - 1] : null;\r\n                  if (i > 0) {\r\n                    return (\r\n                      <line\r\n                        key={item.id}\r\n                        x1={xScale(preData[\"year\"])}\r\n                        y1={yScaleHousehold(preData.sizeOfHousehold)}\r\n                        x2={xScale(item[\"year\"])}\r\n                        y2={yScaleHousehold(item.sizeOfHousehold)}\r\n                        stroke={colorScale(\"世帯平均人数\")}\r\n                      ></line>\r\n                    );\r\n                  }\r\n                })}\r\n              </g>\r\n              <g>\r\n                {mapData.map((item, i) => {\r\n                  return (\r\n                    <circle\r\n                      key={item.id}\r\n                      cx={xScale(item.year)}\r\n                      cy={yScaleHousehold(item.sizeOfHousehold)}\r\n                      r={deviceWidth > 768 ? \"5\" : \"4\"}\r\n                      fill={colorScale(\"世帯平均人数\")}\r\n                    ></circle>\r\n                  );\r\n                })}\r\n              </g>\r\n              <g>\r\n                {mapData.map((item, i) => {\r\n                  const preData = i > 0 ? mapData[i - 1] : null;\r\n                  if (i > 0) {\r\n                    return (\r\n                      <line\r\n                        key={item.id}\r\n                        x1={xScale(preData[\"year\"])}\r\n                        y1={yScalePopulation(preData[\"population\"])}\r\n                        x2={xScale(item[\"year\"])}\r\n                        y2={yScalePopulation(item[\"population\"])}\r\n                        stroke={colorScale(\"人口\")}\r\n                      ></line>\r\n                    );\r\n                  }\r\n                })}\r\n              </g>\r\n              <g>\r\n                {mapData.map((item, i) => {\r\n                  return (\r\n                    <circle\r\n                      transform={`translate(${xScale(\r\n                        item[\"year\"]\r\n                      )},${yScalePopulation(item[\"population\"])})`}\r\n                      key={item.id}\r\n                      cx=\"0\"\r\n                      cy=\"0\"\r\n                      r={deviceWidth > 768 ? \"5\" : \"4\"}\r\n                      fill={colorScale(\"人口\")}\r\n                    />\r\n                  );\r\n                })}\r\n              </g>\r\n            </svg>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default OverallGraph;\r\n","import * as d3 from \"d3\";\r\nimport KanagawaMap from \"./KanagawaMap\";\r\nimport OverallGraph from \"./OverallGraph\";\r\nimport \"bulma/css/bulma.css\";\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <Main />\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Main() {\r\n  const colorScale = d3.scaleOrdinal(d3.schemeCategory10);\r\n  return (\r\n    <div>\r\n      <OverallGraph scale={colorScale} />\r\n      <KanagawaMap scale={colorScale} />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Header() {\r\n  return (\r\n    <header>\r\n      <div className=\"hero is-success\">\r\n        <div className=\"hero-body\">\r\n          <p className=\"title\">KanagawaVis</p>\r\n          <p className=\"subtitle\">\r\n            神奈川県の人口と世帯平均人数の推移、市区町村ごとの人口の推移を可視化\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\nfunction Footer() {\r\n  return (\r\n    <footer className=\"footer\">\r\n      <div className=\"content has-text-centered\">\r\n        <p>kanagawa visualizar</p>\r\n      </div>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { render } from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nrender(<App />, document.querySelector(\"#content\"));\r\n"],"sourceRoot":""}